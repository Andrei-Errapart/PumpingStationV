import java.util.*;

COMPILER LogicProgram

public List<LogicStatement> Result;
public PlcContext Context;

public IOSignal _SignalById(int id)
{
	IOSignal r = Context.SignalTable.get(id);
	if (r == null)
	{
		SemErr("Use of undeclared signal id: " + id + "!");
	}
	return r;
}

public IOSignal _SignalByName(String name)
{
	IOSignal r = Context.LocalSignalMap.get(name);
	if (r == null)
	{
		r = Context.SignalMap.get(name);
	}
	if (r == null)
	{
		SemErr("Use of undeclared signal name: " + name + "!");
	}
	return r;
}

public LogicExpression ConcatExpression(LogicExpression expr, LogicExpression.TYPE op, LogicExpression expr2)
{
	LogicExpression r = new LogicExpression(Context, op, expr, expr2, null, -1);
	return r;
}

CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit  = "0123456789" .
  alphanumeric	= letter + digit .

  cr = '\r'.
  lf  = '\n'.
  tab = '\t'.
  anyButQuote = ANY - '"' .
  id_trail	= alphanumeric + '_' .

TOKENS

  // Have to take into account the double apostrofes.
  string = '"' ('"' '"' | {anyButQuote}) '"'.

  // negative digits can cause trouble, and, after all, it is relatively easy to optimize away.	  
  intliteral = digit {digit} .
  // Identifier, qualified, as it seems.
  ident = (letter|'_') { id_trail } [ { '.' { id_trail } }  ] .

COMMENTS FROM '#' TO lf

IGNORE tab + cr + lf

PRODUCTIONS

LogicProgram =		(. LogicStatement st = null; .) 
	LogicStatement1<out st>		(. if (st!=null) { Result.add(st); } .)
	{ LogicStatement1<out st>	(. if (st!=null) { Result.add(st); } .)
	}
.

/*----------------------------------------------------------------------------*/
LogicStatement1<out LogicStatement st>	(. st = null; .)
= VariableStatement
 | ConditionalStatement<out st>
 | AssignmentStatement<out st>
.

/*----------------------------------------------------------------------------*/
/* VARIABLE DECLARATION */
VariableStatement
= "Var" ident				(. Context.LocalSignalMap.put(t.val, new IOSignal(t.val, -1, IOType.COIL, -1, -1, null)); .)
 ';'
.

/*----------------------------------------------------------------------------*/
/* VARIABLE DECLARATION */
ConditionalStatement<out LogicStatement ls>	(. LogicExpression condition = null;
						   LogicStatement ls1 = null;
						   List<LogicStatement> if_s = new ArrayList<LogicStatement>();
						   List<LogicStatement> else_s = null;
						.)
= "If" Expr<out condition> "Then"	
	{ LogicStatement1<out ls1>		(. if (ls1!=null) { if_s.add(ls1); } .)
	}
[ "Else"					(. else_s = new ArrayList<LogicStatement>(); .)
	{ LogicStatement1<out ls1>		(. if (ls1!=null) { else_s.add(ls1); } .)
	}
]
 "End" ';'					(. ls = new LogicStatement(Context, LogicStatement.TYPE.IF, null, condition, if_s, else_s); .)
.

/*----------------------------------------------------------------------------*/
AssignmentStatement<out LogicStatement ls>	(. IOSignal dst = null;
						   LogicExpression expr = null; .)
= 
 ( ("Signal" ( ident 		(. dst= _SignalByName(t.val); .)
	     | intliteral	(. dst = _SignalById(Integer.parseInt(t.val)); .)
	    ) )
  | ident )			(. dst = _SignalByName(t.val); .)
  ":=" Expr<out expr> ';'	(. if (!dst.Type.CanWrite) {
					SemErr("Cannot assign to read-only " + dst.toString() + "!");
				   }
				   ls = new LogicStatement(Context, LogicStatement.TYPE.ASSIGNMENT, dst, expr, null, null); .)
.

/*----------------------------------------------------------------------------*/
Number<out LogicExpression num>
= intliteral			(. num = new LogicExpression(Context, LogicExpression.TYPE.LITERAL_INT, null, null, null, Integer.parseInt(t.val)); .)
.

/*----------------------------------------------------------------------------*/
TrueOrFalse<out LogicExpression b>	(. b = null; .)
=
  "True"		(. b = new LogicExpression(Context, LogicExpression.TYPE.LITERAL_INT, null, null, null,  1); .)
| "False"		(. b = new LogicExpression(Context, LogicExpression.TYPE.LITERAL_INT, null, null, null,  0); .)
.

/*----------------------------------------------------------------------------*/
SignalOrIsConnected<out LogicExpression le>	(. le = null;
						   LogicExpression.TYPE type = LogicExpression.TYPE.UNARY_OP_SIGNAL; .)
= ( SignalOp<out type>
	( ident				(. le = new LogicExpression(Context, type, null, null, _SignalByName(t.val),  -1); .)
	| intliteral			(. le = new LogicExpression(Context, type, null, null, _SignalById(Integer.parseInt(t.val)), -1); .)
	) )
  | ("NotConnected" 
	  (  ident				(. le = ConcatExpression(new LogicExpression(Context, LogicExpression.TYPE.UNARY_OP_IS_CONNECTED, null, null, _SignalByName(t.val),  -1), LogicExpression.TYPE.UNARY_OP_NOT, null); .)
	  | intliteral			(. le = ConcatExpression(new LogicExpression(Context, LogicExpression.TYPE.UNARY_OP_IS_CONNECTED, null, null, _SignalById(Integer.parseInt(t.val)), -1), LogicExpression.TYPE.UNARY_OP_NOT, null); .)
	  ) )
  | ident				(. le = new LogicExpression(Context, type, null, null, _SignalByName(t.val),  -1); .)
.

/*----------------------------------------------------------------------------*/
SignalOp<out LogicExpression.TYPE type>	(. type = LogicExpression.TYPE.UNARY_OP_SIGNAL; .)
=   "Signal"				(. type = LogicExpression.TYPE.UNARY_OP_SIGNAL; .)
  | "IsConnected"			(. type = LogicExpression.TYPE.UNARY_OP_IS_CONNECTED; .)
.

/*----------------------------------------------------------------------------*/
Expr<out LogicExpression exp>			(. exp = null;
						   LogicExpression exp2 = null;
						   LogicExpression.TYPE op = LogicExpression.TYPE.LITERAL_INT; .)
	= AndExp<out exp>
	{ OrOp<out op> AndExp<out exp2>			(. exp = ConcatExpression(exp, op, exp2); .)
	} .

/*----------------------------------------------------------------------------*/
AndExp<out LogicExpression exp>	(. exp = null;
				   LogicExpression exp2 = null;
				   LogicExpression.TYPE op = LogicExpression.TYPE.LITERAL_INT; .)
= NotExp<out exp>
	{ AndOp<out op> NotExp<out exp2>		(. exp = ConcatExpression(exp, op, exp2); .)
	}.

/*----------------------------------------------------------------------------*/
NotExp<out LogicExpression exp>		(. exp = null;
					   LogicExpression exp2 = null; .)
= 
	  Value<out exp>
	| "Not" Value<out exp2>		(. exp = ConcatExpression(exp2, LogicExpression.TYPE.UNARY_OP_NOT, null); .)
	.

/*----------------------------------------------------------------------------*/
Value<out LogicExpression exp>		(. exp = null; .)
=	  TrueOrFalse<out exp>
	| Number<out exp>
	| SignalOrIsConnected<out exp>
	| "(" Expr<out exp> ")"
.

/*----------------------------------------------------------------------------*/
AndOp<out LogicExpression.TYPE op>	(. op = LogicExpression.TYPE.BINARY_OP_AND; .)
=
	  "And"				(. op = LogicExpression.TYPE.BINARY_OP_AND; .)
	.

/*----------------------------------------------------------------------------*/
OrOp<out LogicExpression.TYPE op>	(. op = LogicExpression.TYPE.BINARY_OP_OR; .)
=
	  "Or"		(. op = LogicExpression.TYPE.BINARY_OP_OR; .)
	| "Xor"		(. op = LogicExpression.TYPE.BINARY_OP_XOR; .)
	.


END LogicProgram .
