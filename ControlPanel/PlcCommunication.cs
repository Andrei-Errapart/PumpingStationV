// Generated by ProtoGen, Version=0.9.0.0, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace ControlPanel {
  
  public static partial class PlcCommunication {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static PlcCommunication() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class IdRange : pb::GeneratedMessageLite<IdRange, IdRange.Builder> {
    private static readonly IdRange defaultInstance = new Builder().BuildPartial();
    public static IdRange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IdRange DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override IdRange ThisMessage {
      get { return this; }
    }
    
    public const int TailIdFieldNumber = 1;
    private bool hasTailId;
    private int tailId_ = 0;
    public bool HasTailId {
      get { return hasTailId; }
    }
    public int TailId {
      get { return tailId_; }
    }
    
    public const int HeadIdFieldNumber = 2;
    private bool hasHeadId;
    private int headId_ = 0;
    public bool HasHeadId {
      get { return hasHeadId; }
    }
    public int HeadId {
      get { return headId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTailId) {
        output.WriteInt32(1, TailId);
      }
      if (HasHeadId) {
        output.WriteInt32(2, HeadId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTailId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TailId);
        }
        if (HasHeadId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, HeadId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasTailId) hash ^= tailId_.GetHashCode();
      if (hasHeadId) hash ^= headId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      IdRange other = obj as IdRange;
      if (other == null) return false;
      if (hasTailId != other.hasTailId || (hasTailId && !tailId_.Equals(other.tailId_))) return false;
      if (hasHeadId != other.hasHeadId || (hasHeadId && !headId_.Equals(other.headId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("TailId", hasTailId, tailId_, writer);
      PrintField("HeadId", hasHeadId, headId_, writer);
    }
    #endregion
    
    public static IdRange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IdRange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IdRange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IdRange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IdRange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IdRange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IdRange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IdRange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IdRange ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IdRange ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IdRange prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<IdRange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      IdRange result = new IdRange();
      
      protected override IdRange MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new IdRange();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override IdRange DefaultInstanceForType {
        get { return global::ControlPanel.IdRange.DefaultInstance; }
      }
      
      public override IdRange BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        IdRange returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is IdRange) {
          return MergeFrom((IdRange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IdRange other) {
        if (other == global::ControlPanel.IdRange.DefaultInstance) return this;
        if (other.HasTailId) {
          TailId = other.TailId;
        }
        if (other.HasHeadId) {
          HeadId = other.HeadId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 8: {
              TailId = input.ReadInt32();
              break;
            }
            case 16: {
              HeadId = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasTailId {
        get { return result.HasTailId; }
      }
      public int TailId {
        get { return result.TailId; }
        set { SetTailId(value); }
      }
      public Builder SetTailId(int value) {
        result.hasTailId = true;
        result.tailId_ = value;
        return this;
      }
      public Builder ClearTailId() {
        result.hasTailId = false;
        result.tailId_ = 0;
        return this;
      }
      
      public bool HasHeadId {
        get { return result.HasHeadId; }
      }
      public int HeadId {
        get { return result.HeadId; }
        set { SetHeadId(value); }
      }
      public Builder SetHeadId(int value) {
        result.hasHeadId = true;
        result.headId_ = value;
        return this;
      }
      public Builder ClearHeadId() {
        result.hasHeadId = false;
        result.headId_ = 0;
        return this;
      }
    }
    static IdRange() {
      object.ReferenceEquals(global::ControlPanel.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class MessageToPlc : pb::GeneratedMessageLite<MessageToPlc, MessageToPlc.Builder> {
    private static readonly MessageToPlc defaultInstance = new Builder().BuildPartial();
    public static MessageToPlc DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MessageToPlc DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MessageToPlc ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    public static class Types {
      public sealed partial class SignalAndValue : pb::GeneratedMessageLite<SignalAndValue, SignalAndValue.Builder> {
        private static readonly SignalAndValue defaultInstance = new Builder().BuildPartial();
        public static SignalAndValue DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override SignalAndValue DefaultInstanceForType {
          get { return defaultInstance; }
        }
        
        protected override SignalAndValue ThisMessage {
          get { return this; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private int value_ = 0;
        public bool HasValue {
          get { return hasValue; }
        }
        public int Value {
          get { return value_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::CodedOutputStream output) {
          int size = SerializedSize;
          if (HasName) {
            output.WriteString(1, Name);
          }
          if (HasValue) {
            output.WriteInt32(2, Value);
          }
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (HasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            if (HasValue) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
            }
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasName) hash ^= name_.GetHashCode();
          if (hasValue) hash ^= value_.GetHashCode();
          return hash;
        }
        
        public override bool Equals(object obj) {
          SignalAndValue other = obj as SignalAndValue;
          if (other == null) return false;
          if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
          if (hasValue != other.hasValue || (hasValue && !value_.Equals(other.value_))) return false;
          return true;
        }
        
        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("Name", hasName, name_, writer);
          PrintField("Value", hasValue, value_, writer);
        }
        #endregion
        
        public static SignalAndValue ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SignalAndValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SignalAndValue ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SignalAndValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SignalAndValue ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SignalAndValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SignalAndValue ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SignalAndValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SignalAndValue ParseFrom(pb::CodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SignalAndValue ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SignalAndValue prototype) {
          return (Builder) new Builder().MergeFrom(prototype);
        }
        
        public sealed partial class Builder : pb::GeneratedBuilderLite<SignalAndValue, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {}
          
          SignalAndValue result = new SignalAndValue();
          
          protected override SignalAndValue MessageBeingBuilt {
            get { return result; }
          }
          
          public override Builder Clear() {
            result = new SignalAndValue();
            return this;
          }
          
          public override Builder Clone() {
            return new Builder().MergeFrom(result);
          }
          
          public override SignalAndValue DefaultInstanceForType {
            get { return global::ControlPanel.MessageToPlc.Types.SignalAndValue.DefaultInstance; }
          }
          
          public override SignalAndValue BuildPartial() {
            if (result == null) {
              throw new global::System.InvalidOperationException("build() has already been called on this Builder");
            }
            SignalAndValue returnMe = result;
            result = null;
            return returnMe;
          }
          
          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is SignalAndValue) {
              return MergeFrom((SignalAndValue) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(SignalAndValue other) {
            if (other == global::ControlPanel.MessageToPlc.Types.SignalAndValue.DefaultInstance) return this;
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasValue) {
              Value = other.Value;
            }
            return this;
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            while (true) {
              uint tag = input.ReadTag();
              switch (tag) {
                case 0: {
                  return this;
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag);
                  break;
                }
                case 10: {
                  Name = input.ReadString();
                  break;
                }
                case 16: {
                  Value = input.ReadInt32();
                  break;
                }
              }
            }
          }
          
          
          public bool HasName {
            get { return result.HasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasValue {
            get { return result.HasValue; }
          }
          public int Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(int value) {
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            result.hasValue = false;
            result.value_ = 0;
            return this;
          }
        }
        static SignalAndValue() {
          object.ReferenceEquals(global::ControlPanel.PlcCommunication.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 16;
    private bool hasId;
    private int id_ = 0;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int QuerySetSignalsFieldNumber = 17;
    private pbc::PopsicleList<global::ControlPanel.MessageToPlc.Types.SignalAndValue> querySetSignals_ = new pbc::PopsicleList<global::ControlPanel.MessageToPlc.Types.SignalAndValue>();
    public scg::IList<global::ControlPanel.MessageToPlc.Types.SignalAndValue> QuerySetSignalsList {
      get { return querySetSignals_; }
    }
    public int QuerySetSignalsCount {
      get { return querySetSignals_.Count; }
    }
    public global::ControlPanel.MessageToPlc.Types.SignalAndValue GetQuerySetSignals(int index) {
      return querySetSignals_[index];
    }
    
    public const int QueryRangeOfRowsFieldNumber = 18;
    private bool hasQueryRangeOfRows;
    private global::ControlPanel.IdRange queryRangeOfRows_ = global::ControlPanel.IdRange.DefaultInstance;
    public bool HasQueryRangeOfRows {
      get { return hasQueryRangeOfRows; }
    }
    public global::ControlPanel.IdRange QueryRangeOfRows {
      get { return queryRangeOfRows_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteInt32(16, Id);
      }
      foreach (global::ControlPanel.MessageToPlc.Types.SignalAndValue element in QuerySetSignalsList) {
        output.WriteMessage(17, element);
      }
      if (HasQueryRangeOfRows) {
        output.WriteMessage(18, QueryRangeOfRows);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, Id);
        }
        foreach (global::ControlPanel.MessageToPlc.Types.SignalAndValue element in QuerySetSignalsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(17, element);
        }
        if (HasQueryRangeOfRows) {
          size += pb::CodedOutputStream.ComputeMessageSize(18, QueryRangeOfRows);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      foreach(global::ControlPanel.MessageToPlc.Types.SignalAndValue i in querySetSignals_)
        hash ^= i.GetHashCode();
      if (hasQueryRangeOfRows) hash ^= queryRangeOfRows_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      MessageToPlc other = obj as MessageToPlc;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if(querySetSignals_.Count != other.querySetSignals_.Count) return false;
      for(int ix=0; ix < querySetSignals_.Count; ix++)
        if(!querySetSignals_[ix].Equals(other.querySetSignals_[ix])) return false;
      if (hasQueryRangeOfRows != other.hasQueryRangeOfRows || (hasQueryRangeOfRows && !queryRangeOfRows_.Equals(other.queryRangeOfRows_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("Id", hasId, id_, writer);
      PrintField("QuerySetSignals", querySetSignals_, writer);
      PrintField("QueryRangeOfRows", hasQueryRangeOfRows, queryRangeOfRows_, writer);
    }
    #endregion
    
    public static MessageToPlc ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MessageToPlc ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MessageToPlc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MessageToPlc ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MessageToPlc prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<MessageToPlc, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MessageToPlc result = new MessageToPlc();
      
      protected override MessageToPlc MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MessageToPlc();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override MessageToPlc DefaultInstanceForType {
        get { return global::ControlPanel.MessageToPlc.DefaultInstance; }
      }
      
      public override MessageToPlc BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.querySetSignals_.MakeReadOnly();
        MessageToPlc returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is MessageToPlc) {
          return MergeFrom((MessageToPlc) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MessageToPlc other) {
        if (other == global::ControlPanel.MessageToPlc.DefaultInstance) return this;
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.querySetSignals_.Count != 0) {
          base.AddRange(other.querySetSignals_, result.querySetSignals_);
        }
        if (other.HasQueryRangeOfRows) {
          MergeQueryRangeOfRows(other.QueryRangeOfRows);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 128: {
              Id = input.ReadInt32();
              break;
            }
            case 138: {
              global::ControlPanel.MessageToPlc.Types.SignalAndValue.Builder subBuilder = global::ControlPanel.MessageToPlc.Types.SignalAndValue.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddQuerySetSignals(subBuilder.BuildPartial());
              break;
            }
            case 146: {
              global::ControlPanel.IdRange.Builder subBuilder = global::ControlPanel.IdRange.CreateBuilder();
              if (HasQueryRangeOfRows) {
                subBuilder.MergeFrom(QueryRangeOfRows);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              QueryRangeOfRows = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
        get { return result.HasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::ControlPanel.MessageToPlc.Types.SignalAndValue> QuerySetSignalsList {
        get { return result.querySetSignals_; }
      }
      public int QuerySetSignalsCount {
        get { return result.QuerySetSignalsCount; }
      }
      public global::ControlPanel.MessageToPlc.Types.SignalAndValue GetQuerySetSignals(int index) {
        return result.GetQuerySetSignals(index);
      }
      public Builder SetQuerySetSignals(int index, global::ControlPanel.MessageToPlc.Types.SignalAndValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.querySetSignals_[index] = value;
        return this;
      }
      public Builder SetQuerySetSignals(int index, global::ControlPanel.MessageToPlc.Types.SignalAndValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.querySetSignals_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuerySetSignals(global::ControlPanel.MessageToPlc.Types.SignalAndValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.querySetSignals_.Add(value);
        return this;
      }
      public Builder AddQuerySetSignals(global::ControlPanel.MessageToPlc.Types.SignalAndValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.querySetSignals_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuerySetSignals(scg::IEnumerable<global::ControlPanel.MessageToPlc.Types.SignalAndValue> values) {
        base.AddRange(values, result.querySetSignals_);
        return this;
      }
      public Builder ClearQuerySetSignals() {
        result.querySetSignals_.Clear();
        return this;
      }
      
      public bool HasQueryRangeOfRows {
       get { return result.HasQueryRangeOfRows; }
      }
      public global::ControlPanel.IdRange QueryRangeOfRows {
        get { return result.QueryRangeOfRows; }
        set { SetQueryRangeOfRows(value); }
      }
      public Builder SetQueryRangeOfRows(global::ControlPanel.IdRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasQueryRangeOfRows = true;
        result.queryRangeOfRows_ = value;
        return this;
      }
      public Builder SetQueryRangeOfRows(global::ControlPanel.IdRange.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasQueryRangeOfRows = true;
        result.queryRangeOfRows_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQueryRangeOfRows(global::ControlPanel.IdRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasQueryRangeOfRows &&
            result.queryRangeOfRows_ != global::ControlPanel.IdRange.DefaultInstance) {
            result.queryRangeOfRows_ = global::ControlPanel.IdRange.CreateBuilder(result.queryRangeOfRows_).MergeFrom(value).BuildPartial();
        } else {
          result.queryRangeOfRows_ = value;
        }
        result.hasQueryRangeOfRows = true;
        return this;
      }
      public Builder ClearQueryRangeOfRows() {
        result.hasQueryRangeOfRows = false;
        result.queryRangeOfRows_ = global::ControlPanel.IdRange.DefaultInstance;
        return this;
      }
    }
    static MessageToPlc() {
      object.ReferenceEquals(global::ControlPanel.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class MessageFromPlc : pb::GeneratedMessageLite<MessageFromPlc, MessageFromPlc.Builder> {
    private static readonly MessageFromPlc defaultInstance = new Builder().BuildPartial();
    public static MessageFromPlc DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MessageFromPlc DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MessageFromPlc ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    public static class Types {
      public sealed partial class SignalValuesType : pb::GeneratedMessageLite<SignalValuesType, SignalValuesType.Builder> {
        private static readonly SignalValuesType defaultInstance = new Builder().BuildPartial();
        public static SignalValuesType DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override SignalValuesType DefaultInstanceForType {
          get { return defaultInstance; }
        }
        
        protected override SignalValuesType ThisMessage {
          get { return this; }
        }
        
        public const int RowIdFieldNumber = 1;
        private bool hasRowId;
        private int rowId_ = 0;
        public bool HasRowId {
          get { return hasRowId; }
        }
        public int RowId {
          get { return rowId_; }
        }
        
        public const int VersionFieldNumber = 2;
        private bool hasVersion;
        private int version_ = 0;
        public bool HasVersion {
          get { return hasVersion; }
        }
        public int Version {
          get { return version_; }
        }
        
        public const int TimeMsFieldNumber = 3;
        private bool hasTimeMs;
        private long timeMs_ = 0L;
        public bool HasTimeMs {
          get { return hasTimeMs; }
        }
        public long TimeMs {
          get { return timeMs_; }
        }
        
        public const int SignalValuesFieldNumber = 4;
        private bool hasSignalValues;
        private pb::ByteString signalValues_ = pb::ByteString.Empty;
        public bool HasSignalValues {
          get { return hasSignalValues; }
        }
        public pb::ByteString SignalValues {
          get { return signalValues_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::CodedOutputStream output) {
          int size = SerializedSize;
          if (HasRowId) {
            output.WriteInt32(1, RowId);
          }
          if (HasVersion) {
            output.WriteInt32(2, Version);
          }
          if (HasTimeMs) {
            output.WriteInt64(3, TimeMs);
          }
          if (HasSignalValues) {
            output.WriteBytes(4, SignalValues);
          }
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (HasRowId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, RowId);
            }
            if (HasVersion) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
            }
            if (HasTimeMs) {
              size += pb::CodedOutputStream.ComputeInt64Size(3, TimeMs);
            }
            if (HasSignalValues) {
              size += pb::CodedOutputStream.ComputeBytesSize(4, SignalValues);
            }
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasRowId) hash ^= rowId_.GetHashCode();
          if (hasVersion) hash ^= version_.GetHashCode();
          if (hasTimeMs) hash ^= timeMs_.GetHashCode();
          if (hasSignalValues) hash ^= signalValues_.GetHashCode();
          return hash;
        }
        
        public override bool Equals(object obj) {
          SignalValuesType other = obj as SignalValuesType;
          if (other == null) return false;
          if (hasRowId != other.hasRowId || (hasRowId && !rowId_.Equals(other.rowId_))) return false;
          if (hasVersion != other.hasVersion || (hasVersion && !version_.Equals(other.version_))) return false;
          if (hasTimeMs != other.hasTimeMs || (hasTimeMs && !timeMs_.Equals(other.timeMs_))) return false;
          if (hasSignalValues != other.hasSignalValues || (hasSignalValues && !signalValues_.Equals(other.signalValues_))) return false;
          return true;
        }
        
        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("RowId", hasRowId, rowId_, writer);
          PrintField("Version", hasVersion, version_, writer);
          PrintField("TimeMs", hasTimeMs, timeMs_, writer);
          PrintField("SignalValues", hasSignalValues, signalValues_, writer);
        }
        #endregion
        
        public static SignalValuesType ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SignalValuesType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SignalValuesType ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SignalValuesType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SignalValuesType ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SignalValuesType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SignalValuesType ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SignalValuesType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SignalValuesType ParseFrom(pb::CodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SignalValuesType ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SignalValuesType prototype) {
          return (Builder) new Builder().MergeFrom(prototype);
        }
        
        public sealed partial class Builder : pb::GeneratedBuilderLite<SignalValuesType, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {}
          
          SignalValuesType result = new SignalValuesType();
          
          protected override SignalValuesType MessageBeingBuilt {
            get { return result; }
          }
          
          public override Builder Clear() {
            result = new SignalValuesType();
            return this;
          }
          
          public override Builder Clone() {
            return new Builder().MergeFrom(result);
          }
          
          public override SignalValuesType DefaultInstanceForType {
            get { return global::ControlPanel.MessageFromPlc.Types.SignalValuesType.DefaultInstance; }
          }
          
          public override SignalValuesType BuildPartial() {
            if (result == null) {
              throw new global::System.InvalidOperationException("build() has already been called on this Builder");
            }
            SignalValuesType returnMe = result;
            result = null;
            return returnMe;
          }
          
          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is SignalValuesType) {
              return MergeFrom((SignalValuesType) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(SignalValuesType other) {
            if (other == global::ControlPanel.MessageFromPlc.Types.SignalValuesType.DefaultInstance) return this;
            if (other.HasRowId) {
              RowId = other.RowId;
            }
            if (other.HasVersion) {
              Version = other.Version;
            }
            if (other.HasTimeMs) {
              TimeMs = other.TimeMs;
            }
            if (other.HasSignalValues) {
              SignalValues = other.SignalValues;
            }
            return this;
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            while (true) {
              uint tag = input.ReadTag();
              switch (tag) {
                case 0: {
                  return this;
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag);
                  break;
                }
                case 8: {
                  RowId = input.ReadInt32();
                  break;
                }
                case 16: {
                  Version = input.ReadInt32();
                  break;
                }
                case 24: {
                  TimeMs = input.ReadInt64();
                  break;
                }
                case 34: {
                  SignalValues = input.ReadBytes();
                  break;
                }
              }
            }
          }
          
          
          public bool HasRowId {
            get { return result.HasRowId; }
          }
          public int RowId {
            get { return result.RowId; }
            set { SetRowId(value); }
          }
          public Builder SetRowId(int value) {
            result.hasRowId = true;
            result.rowId_ = value;
            return this;
          }
          public Builder ClearRowId() {
            result.hasRowId = false;
            result.rowId_ = 0;
            return this;
          }
          
          public bool HasVersion {
            get { return result.HasVersion; }
          }
          public int Version {
            get { return result.Version; }
            set { SetVersion(value); }
          }
          public Builder SetVersion(int value) {
            result.hasVersion = true;
            result.version_ = value;
            return this;
          }
          public Builder ClearVersion() {
            result.hasVersion = false;
            result.version_ = 0;
            return this;
          }
          
          public bool HasTimeMs {
            get { return result.HasTimeMs; }
          }
          public long TimeMs {
            get { return result.TimeMs; }
            set { SetTimeMs(value); }
          }
          public Builder SetTimeMs(long value) {
            result.hasTimeMs = true;
            result.timeMs_ = value;
            return this;
          }
          public Builder ClearTimeMs() {
            result.hasTimeMs = false;
            result.timeMs_ = 0L;
            return this;
          }
          
          public bool HasSignalValues {
            get { return result.HasSignalValues; }
          }
          public pb::ByteString SignalValues {
            get { return result.SignalValues; }
            set { SetSignalValues(value); }
          }
          public Builder SetSignalValues(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.hasSignalValues = true;
            result.signalValues_ = value;
            return this;
          }
          public Builder ClearSignalValues() {
            result.hasSignalValues = false;
            result.signalValues_ = pb::ByteString.Empty;
            return this;
          }
        }
        static SignalValuesType() {
          object.ReferenceEquals(global::ControlPanel.PlcCommunication.Descriptor, null);
        }
      }
      
      public sealed partial class OOBConfigurationType : pb::GeneratedMessageLite<OOBConfigurationType, OOBConfigurationType.Builder> {
        private static readonly OOBConfigurationType defaultInstance = new Builder().BuildPartial();
        public static OOBConfigurationType DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override OOBConfigurationType DefaultInstanceForType {
          get { return defaultInstance; }
        }
        
        protected override OOBConfigurationType ThisMessage {
          get { return this; }
        }
        
        public const int VersionFieldNumber = 1;
        private bool hasVersion;
        private int version_ = 0;
        public bool HasVersion {
          get { return hasVersion; }
        }
        public int Version {
          get { return version_; }
        }
        
        public const int ConfigurationFileFieldNumber = 2;
        private bool hasConfigurationFile;
        private pb::ByteString configurationFile_ = pb::ByteString.Empty;
        public bool HasConfigurationFile {
          get { return hasConfigurationFile; }
        }
        public pb::ByteString ConfigurationFile {
          get { return configurationFile_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::CodedOutputStream output) {
          int size = SerializedSize;
          if (HasVersion) {
            output.WriteInt32(1, Version);
          }
          if (HasConfigurationFile) {
            output.WriteBytes(2, ConfigurationFile);
          }
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (HasVersion) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
            }
            if (HasConfigurationFile) {
              size += pb::CodedOutputStream.ComputeBytesSize(2, ConfigurationFile);
            }
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasVersion) hash ^= version_.GetHashCode();
          if (hasConfigurationFile) hash ^= configurationFile_.GetHashCode();
          return hash;
        }
        
        public override bool Equals(object obj) {
          OOBConfigurationType other = obj as OOBConfigurationType;
          if (other == null) return false;
          if (hasVersion != other.hasVersion || (hasVersion && !version_.Equals(other.version_))) return false;
          if (hasConfigurationFile != other.hasConfigurationFile || (hasConfigurationFile && !configurationFile_.Equals(other.configurationFile_))) return false;
          return true;
        }
        
        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("Version", hasVersion, version_, writer);
          PrintField("ConfigurationFile", hasConfigurationFile, configurationFile_, writer);
        }
        #endregion
        
        public static OOBConfigurationType ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static OOBConfigurationType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static OOBConfigurationType ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static OOBConfigurationType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static OOBConfigurationType ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static OOBConfigurationType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static OOBConfigurationType ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static OOBConfigurationType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static OOBConfigurationType ParseFrom(pb::CodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static OOBConfigurationType ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(OOBConfigurationType prototype) {
          return (Builder) new Builder().MergeFrom(prototype);
        }
        
        public sealed partial class Builder : pb::GeneratedBuilderLite<OOBConfigurationType, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {}
          
          OOBConfigurationType result = new OOBConfigurationType();
          
          protected override OOBConfigurationType MessageBeingBuilt {
            get { return result; }
          }
          
          public override Builder Clear() {
            result = new OOBConfigurationType();
            return this;
          }
          
          public override Builder Clone() {
            return new Builder().MergeFrom(result);
          }
          
          public override OOBConfigurationType DefaultInstanceForType {
            get { return global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType.DefaultInstance; }
          }
          
          public override OOBConfigurationType BuildPartial() {
            if (result == null) {
              throw new global::System.InvalidOperationException("build() has already been called on this Builder");
            }
            OOBConfigurationType returnMe = result;
            result = null;
            return returnMe;
          }
          
          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is OOBConfigurationType) {
              return MergeFrom((OOBConfigurationType) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(OOBConfigurationType other) {
            if (other == global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType.DefaultInstance) return this;
            if (other.HasVersion) {
              Version = other.Version;
            }
            if (other.HasConfigurationFile) {
              ConfigurationFile = other.ConfigurationFile;
            }
            return this;
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            while (true) {
              uint tag = input.ReadTag();
              switch (tag) {
                case 0: {
                  return this;
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag);
                  break;
                }
                case 8: {
                  Version = input.ReadInt32();
                  break;
                }
                case 18: {
                  ConfigurationFile = input.ReadBytes();
                  break;
                }
              }
            }
          }
          
          
          public bool HasVersion {
            get { return result.HasVersion; }
          }
          public int Version {
            get { return result.Version; }
            set { SetVersion(value); }
          }
          public Builder SetVersion(int value) {
            result.hasVersion = true;
            result.version_ = value;
            return this;
          }
          public Builder ClearVersion() {
            result.hasVersion = false;
            result.version_ = 0;
            return this;
          }
          
          public bool HasConfigurationFile {
            get { return result.HasConfigurationFile; }
          }
          public pb::ByteString ConfigurationFile {
            get { return result.ConfigurationFile; }
            set { SetConfigurationFile(value); }
          }
          public Builder SetConfigurationFile(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.hasConfigurationFile = true;
            result.configurationFile_ = value;
            return this;
          }
          public Builder ClearConfigurationFile() {
            result.hasConfigurationFile = false;
            result.configurationFile_ = pb::ByteString.Empty;
            return this;
          }
        }
        static OOBConfigurationType() {
          object.ReferenceEquals(global::ControlPanel.PlcCommunication.Descriptor, null);
        }
      }
      
      public sealed partial class ResponseType : pb::GeneratedMessageLite<ResponseType, ResponseType.Builder> {
        private static readonly ResponseType defaultInstance = new Builder().BuildPartial();
        public static ResponseType DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override ResponseType DefaultInstanceForType {
          get { return defaultInstance; }
        }
        
        protected override ResponseType ThisMessage {
          get { return this; }
        }
        
        public const int OKFieldNumber = 1;
        private bool hasOK;
        private bool oK_ = false;
        public bool HasOK {
          get { return hasOK; }
        }
        public bool OK {
          get { return oK_; }
        }
        
        public const int MessageFieldNumber = 2;
        private bool hasMessage;
        private string message_ = "";
        public bool HasMessage {
          get { return hasMessage; }
        }
        public string Message {
          get { return message_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::CodedOutputStream output) {
          int size = SerializedSize;
          if (HasOK) {
            output.WriteBool(1, OK);
          }
          if (HasMessage) {
            output.WriteString(2, Message);
          }
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (HasOK) {
              size += pb::CodedOutputStream.ComputeBoolSize(1, OK);
            }
            if (HasMessage) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Message);
            }
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasOK) hash ^= oK_.GetHashCode();
          if (hasMessage) hash ^= message_.GetHashCode();
          return hash;
        }
        
        public override bool Equals(object obj) {
          ResponseType other = obj as ResponseType;
          if (other == null) return false;
          if (hasOK != other.hasOK || (hasOK && !oK_.Equals(other.oK_))) return false;
          if (hasMessage != other.hasMessage || (hasMessage && !message_.Equals(other.message_))) return false;
          return true;
        }
        
        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("OK", hasOK, oK_, writer);
          PrintField("Message", hasMessage, message_, writer);
        }
        #endregion
        
        public static ResponseType ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ResponseType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ResponseType ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ResponseType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ResponseType ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ResponseType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ResponseType ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ResponseType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ResponseType ParseFrom(pb::CodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ResponseType ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ResponseType prototype) {
          return (Builder) new Builder().MergeFrom(prototype);
        }
        
        public sealed partial class Builder : pb::GeneratedBuilderLite<ResponseType, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {}
          
          ResponseType result = new ResponseType();
          
          protected override ResponseType MessageBeingBuilt {
            get { return result; }
          }
          
          public override Builder Clear() {
            result = new ResponseType();
            return this;
          }
          
          public override Builder Clone() {
            return new Builder().MergeFrom(result);
          }
          
          public override ResponseType DefaultInstanceForType {
            get { return global::ControlPanel.MessageFromPlc.Types.ResponseType.DefaultInstance; }
          }
          
          public override ResponseType BuildPartial() {
            if (result == null) {
              throw new global::System.InvalidOperationException("build() has already been called on this Builder");
            }
            ResponseType returnMe = result;
            result = null;
            return returnMe;
          }
          
          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is ResponseType) {
              return MergeFrom((ResponseType) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(ResponseType other) {
            if (other == global::ControlPanel.MessageFromPlc.Types.ResponseType.DefaultInstance) return this;
            if (other.HasOK) {
              OK = other.OK;
            }
            if (other.HasMessage) {
              Message = other.Message;
            }
            return this;
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            while (true) {
              uint tag = input.ReadTag();
              switch (tag) {
                case 0: {
                  return this;
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag);
                  break;
                }
                case 8: {
                  OK = input.ReadBool();
                  break;
                }
                case 18: {
                  Message = input.ReadString();
                  break;
                }
              }
            }
          }
          
          
          public bool HasOK {
            get { return result.HasOK; }
          }
          public bool OK {
            get { return result.OK; }
            set { SetOK(value); }
          }
          public Builder SetOK(bool value) {
            result.hasOK = true;
            result.oK_ = value;
            return this;
          }
          public Builder ClearOK() {
            result.hasOK = false;
            result.oK_ = false;
            return this;
          }
          
          public bool HasMessage {
            get { return result.HasMessage; }
          }
          public string Message {
            get { return result.Message; }
            set { SetMessage(value); }
          }
          public Builder SetMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.hasMessage = true;
            result.message_ = value;
            return this;
          }
          public Builder ClearMessage() {
            result.hasMessage = false;
            result.message_ = "";
            return this;
          }
        }
        static ResponseType() {
          object.ReferenceEquals(global::ControlPanel.PlcCommunication.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 16;
    private bool hasId;
    private int id_ = 0;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int ResponseFieldNumber = 17;
    private bool hasResponse;
    private global::ControlPanel.MessageFromPlc.Types.ResponseType response_ = global::ControlPanel.MessageFromPlc.Types.ResponseType.DefaultInstance;
    public bool HasResponse {
      get { return hasResponse; }
    }
    public global::ControlPanel.MessageFromPlc.Types.ResponseType Response {
      get { return response_; }
    }
    
    public const int OOBSignalValuesFieldNumber = 18;
    private bool hasOOBSignalValues;
    private global::ControlPanel.MessageFromPlc.Types.SignalValuesType oOBSignalValues_ = global::ControlPanel.MessageFromPlc.Types.SignalValuesType.DefaultInstance;
    public bool HasOOBSignalValues {
      get { return hasOOBSignalValues; }
    }
    public global::ControlPanel.MessageFromPlc.Types.SignalValuesType OOBSignalValues {
      get { return oOBSignalValues_; }
    }
    
    public const int OOBConfigurationFieldNumber = 19;
    private bool hasOOBConfiguration;
    private global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType oOBConfiguration_ = global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType.DefaultInstance;
    public bool HasOOBConfiguration {
      get { return hasOOBConfiguration; }
    }
    public global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType OOBConfiguration {
      get { return oOBConfiguration_; }
    }
    
    public const int OOBDatabaseRangeFieldNumber = 20;
    private bool hasOOBDatabaseRange;
    private global::ControlPanel.IdRange oOBDatabaseRange_ = global::ControlPanel.IdRange.DefaultInstance;
    public bool HasOOBDatabaseRange {
      get { return hasOOBDatabaseRange; }
    }
    public global::ControlPanel.IdRange OOBDatabaseRange {
      get { return oOBDatabaseRange_; }
    }
    
    public const int DatabaseSignalValuesFieldNumber = 21;
    private pbc::PopsicleList<global::ControlPanel.MessageFromPlc.Types.SignalValuesType> databaseSignalValues_ = new pbc::PopsicleList<global::ControlPanel.MessageFromPlc.Types.SignalValuesType>();
    public scg::IList<global::ControlPanel.MessageFromPlc.Types.SignalValuesType> DatabaseSignalValuesList {
      get { return databaseSignalValues_; }
    }
    public int DatabaseSignalValuesCount {
      get { return databaseSignalValues_.Count; }
    }
    public global::ControlPanel.MessageFromPlc.Types.SignalValuesType GetDatabaseSignalValues(int index) {
      return databaseSignalValues_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteInt32(16, Id);
      }
      if (HasResponse) {
        output.WriteMessage(17, Response);
      }
      if (HasOOBSignalValues) {
        output.WriteMessage(18, OOBSignalValues);
      }
      if (HasOOBConfiguration) {
        output.WriteMessage(19, OOBConfiguration);
      }
      if (HasOOBDatabaseRange) {
        output.WriteMessage(20, OOBDatabaseRange);
      }
      foreach (global::ControlPanel.MessageFromPlc.Types.SignalValuesType element in DatabaseSignalValuesList) {
        output.WriteMessage(21, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, Id);
        }
        if (HasResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(17, Response);
        }
        if (HasOOBSignalValues) {
          size += pb::CodedOutputStream.ComputeMessageSize(18, OOBSignalValues);
        }
        if (HasOOBConfiguration) {
          size += pb::CodedOutputStream.ComputeMessageSize(19, OOBConfiguration);
        }
        if (HasOOBDatabaseRange) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, OOBDatabaseRange);
        }
        foreach (global::ControlPanel.MessageFromPlc.Types.SignalValuesType element in DatabaseSignalValuesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasResponse) hash ^= response_.GetHashCode();
      if (hasOOBSignalValues) hash ^= oOBSignalValues_.GetHashCode();
      if (hasOOBConfiguration) hash ^= oOBConfiguration_.GetHashCode();
      if (hasOOBDatabaseRange) hash ^= oOBDatabaseRange_.GetHashCode();
      foreach(global::ControlPanel.MessageFromPlc.Types.SignalValuesType i in databaseSignalValues_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      MessageFromPlc other = obj as MessageFromPlc;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasResponse != other.hasResponse || (hasResponse && !response_.Equals(other.response_))) return false;
      if (hasOOBSignalValues != other.hasOOBSignalValues || (hasOOBSignalValues && !oOBSignalValues_.Equals(other.oOBSignalValues_))) return false;
      if (hasOOBConfiguration != other.hasOOBConfiguration || (hasOOBConfiguration && !oOBConfiguration_.Equals(other.oOBConfiguration_))) return false;
      if (hasOOBDatabaseRange != other.hasOOBDatabaseRange || (hasOOBDatabaseRange && !oOBDatabaseRange_.Equals(other.oOBDatabaseRange_))) return false;
      if(databaseSignalValues_.Count != other.databaseSignalValues_.Count) return false;
      for(int ix=0; ix < databaseSignalValues_.Count; ix++)
        if(!databaseSignalValues_[ix].Equals(other.databaseSignalValues_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("Id", hasId, id_, writer);
      PrintField("Response", hasResponse, response_, writer);
      PrintField("OOBSignalValues", hasOOBSignalValues, oOBSignalValues_, writer);
      PrintField("OOBConfiguration", hasOOBConfiguration, oOBConfiguration_, writer);
      PrintField("OOBDatabaseRange", hasOOBDatabaseRange, oOBDatabaseRange_, writer);
      PrintField("DatabaseSignalValues", databaseSignalValues_, writer);
    }
    #endregion
    
    public static MessageFromPlc ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MessageFromPlc ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MessageFromPlc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MessageFromPlc prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<MessageFromPlc, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MessageFromPlc result = new MessageFromPlc();
      
      protected override MessageFromPlc MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MessageFromPlc();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override MessageFromPlc DefaultInstanceForType {
        get { return global::ControlPanel.MessageFromPlc.DefaultInstance; }
      }
      
      public override MessageFromPlc BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.databaseSignalValues_.MakeReadOnly();
        MessageFromPlc returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is MessageFromPlc) {
          return MergeFrom((MessageFromPlc) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MessageFromPlc other) {
        if (other == global::ControlPanel.MessageFromPlc.DefaultInstance) return this;
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasResponse) {
          MergeResponse(other.Response);
        }
        if (other.HasOOBSignalValues) {
          MergeOOBSignalValues(other.OOBSignalValues);
        }
        if (other.HasOOBConfiguration) {
          MergeOOBConfiguration(other.OOBConfiguration);
        }
        if (other.HasOOBDatabaseRange) {
          MergeOOBDatabaseRange(other.OOBDatabaseRange);
        }
        if (other.databaseSignalValues_.Count != 0) {
          base.AddRange(other.databaseSignalValues_, result.databaseSignalValues_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 128: {
              Id = input.ReadInt32();
              break;
            }
            case 138: {
              global::ControlPanel.MessageFromPlc.Types.ResponseType.Builder subBuilder = global::ControlPanel.MessageFromPlc.Types.ResponseType.CreateBuilder();
              if (HasResponse) {
                subBuilder.MergeFrom(Response);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Response = subBuilder.BuildPartial();
              break;
            }
            case 146: {
              global::ControlPanel.MessageFromPlc.Types.SignalValuesType.Builder subBuilder = global::ControlPanel.MessageFromPlc.Types.SignalValuesType.CreateBuilder();
              if (HasOOBSignalValues) {
                subBuilder.MergeFrom(OOBSignalValues);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OOBSignalValues = subBuilder.BuildPartial();
              break;
            }
            case 154: {
              global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType.Builder subBuilder = global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType.CreateBuilder();
              if (HasOOBConfiguration) {
                subBuilder.MergeFrom(OOBConfiguration);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OOBConfiguration = subBuilder.BuildPartial();
              break;
            }
            case 162: {
              global::ControlPanel.IdRange.Builder subBuilder = global::ControlPanel.IdRange.CreateBuilder();
              if (HasOOBDatabaseRange) {
                subBuilder.MergeFrom(OOBDatabaseRange);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OOBDatabaseRange = subBuilder.BuildPartial();
              break;
            }
            case 170: {
              global::ControlPanel.MessageFromPlc.Types.SignalValuesType.Builder subBuilder = global::ControlPanel.MessageFromPlc.Types.SignalValuesType.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddDatabaseSignalValues(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
        get { return result.HasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasResponse {
       get { return result.HasResponse; }
      }
      public global::ControlPanel.MessageFromPlc.Types.ResponseType Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(global::ControlPanel.MessageFromPlc.Types.ResponseType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder SetResponse(global::ControlPanel.MessageFromPlc.Types.ResponseType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasResponse = true;
        result.response_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponse(global::ControlPanel.MessageFromPlc.Types.ResponseType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasResponse &&
            result.response_ != global::ControlPanel.MessageFromPlc.Types.ResponseType.DefaultInstance) {
            result.response_ = global::ControlPanel.MessageFromPlc.Types.ResponseType.CreateBuilder(result.response_).MergeFrom(value).BuildPartial();
        } else {
          result.response_ = value;
        }
        result.hasResponse = true;
        return this;
      }
      public Builder ClearResponse() {
        result.hasResponse = false;
        result.response_ = global::ControlPanel.MessageFromPlc.Types.ResponseType.DefaultInstance;
        return this;
      }
      
      public bool HasOOBSignalValues {
       get { return result.HasOOBSignalValues; }
      }
      public global::ControlPanel.MessageFromPlc.Types.SignalValuesType OOBSignalValues {
        get { return result.OOBSignalValues; }
        set { SetOOBSignalValues(value); }
      }
      public Builder SetOOBSignalValues(global::ControlPanel.MessageFromPlc.Types.SignalValuesType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOOBSignalValues = true;
        result.oOBSignalValues_ = value;
        return this;
      }
      public Builder SetOOBSignalValues(global::ControlPanel.MessageFromPlc.Types.SignalValuesType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOOBSignalValues = true;
        result.oOBSignalValues_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOOBSignalValues(global::ControlPanel.MessageFromPlc.Types.SignalValuesType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOOBSignalValues &&
            result.oOBSignalValues_ != global::ControlPanel.MessageFromPlc.Types.SignalValuesType.DefaultInstance) {
            result.oOBSignalValues_ = global::ControlPanel.MessageFromPlc.Types.SignalValuesType.CreateBuilder(result.oOBSignalValues_).MergeFrom(value).BuildPartial();
        } else {
          result.oOBSignalValues_ = value;
        }
        result.hasOOBSignalValues = true;
        return this;
      }
      public Builder ClearOOBSignalValues() {
        result.hasOOBSignalValues = false;
        result.oOBSignalValues_ = global::ControlPanel.MessageFromPlc.Types.SignalValuesType.DefaultInstance;
        return this;
      }
      
      public bool HasOOBConfiguration {
       get { return result.HasOOBConfiguration; }
      }
      public global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType OOBConfiguration {
        get { return result.OOBConfiguration; }
        set { SetOOBConfiguration(value); }
      }
      public Builder SetOOBConfiguration(global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOOBConfiguration = true;
        result.oOBConfiguration_ = value;
        return this;
      }
      public Builder SetOOBConfiguration(global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOOBConfiguration = true;
        result.oOBConfiguration_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOOBConfiguration(global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOOBConfiguration &&
            result.oOBConfiguration_ != global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType.DefaultInstance) {
            result.oOBConfiguration_ = global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType.CreateBuilder(result.oOBConfiguration_).MergeFrom(value).BuildPartial();
        } else {
          result.oOBConfiguration_ = value;
        }
        result.hasOOBConfiguration = true;
        return this;
      }
      public Builder ClearOOBConfiguration() {
        result.hasOOBConfiguration = false;
        result.oOBConfiguration_ = global::ControlPanel.MessageFromPlc.Types.OOBConfigurationType.DefaultInstance;
        return this;
      }
      
      public bool HasOOBDatabaseRange {
       get { return result.HasOOBDatabaseRange; }
      }
      public global::ControlPanel.IdRange OOBDatabaseRange {
        get { return result.OOBDatabaseRange; }
        set { SetOOBDatabaseRange(value); }
      }
      public Builder SetOOBDatabaseRange(global::ControlPanel.IdRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOOBDatabaseRange = true;
        result.oOBDatabaseRange_ = value;
        return this;
      }
      public Builder SetOOBDatabaseRange(global::ControlPanel.IdRange.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOOBDatabaseRange = true;
        result.oOBDatabaseRange_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOOBDatabaseRange(global::ControlPanel.IdRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOOBDatabaseRange &&
            result.oOBDatabaseRange_ != global::ControlPanel.IdRange.DefaultInstance) {
            result.oOBDatabaseRange_ = global::ControlPanel.IdRange.CreateBuilder(result.oOBDatabaseRange_).MergeFrom(value).BuildPartial();
        } else {
          result.oOBDatabaseRange_ = value;
        }
        result.hasOOBDatabaseRange = true;
        return this;
      }
      public Builder ClearOOBDatabaseRange() {
        result.hasOOBDatabaseRange = false;
        result.oOBDatabaseRange_ = global::ControlPanel.IdRange.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::ControlPanel.MessageFromPlc.Types.SignalValuesType> DatabaseSignalValuesList {
        get { return result.databaseSignalValues_; }
      }
      public int DatabaseSignalValuesCount {
        get { return result.DatabaseSignalValuesCount; }
      }
      public global::ControlPanel.MessageFromPlc.Types.SignalValuesType GetDatabaseSignalValues(int index) {
        return result.GetDatabaseSignalValues(index);
      }
      public Builder SetDatabaseSignalValues(int index, global::ControlPanel.MessageFromPlc.Types.SignalValuesType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.databaseSignalValues_[index] = value;
        return this;
      }
      public Builder SetDatabaseSignalValues(int index, global::ControlPanel.MessageFromPlc.Types.SignalValuesType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.databaseSignalValues_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDatabaseSignalValues(global::ControlPanel.MessageFromPlc.Types.SignalValuesType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.databaseSignalValues_.Add(value);
        return this;
      }
      public Builder AddDatabaseSignalValues(global::ControlPanel.MessageFromPlc.Types.SignalValuesType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.databaseSignalValues_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDatabaseSignalValues(scg::IEnumerable<global::ControlPanel.MessageFromPlc.Types.SignalValuesType> values) {
        base.AddRange(values, result.databaseSignalValues_);
        return this;
      }
      public Builder ClearDatabaseSignalValues() {
        result.databaseSignalValues_.Clear();
        return this;
      }
    }
    static MessageFromPlc() {
      object.ReferenceEquals(global::ControlPanel.PlcCommunication.Descriptor, null);
    }
  }
  
  #endregion
  
}
